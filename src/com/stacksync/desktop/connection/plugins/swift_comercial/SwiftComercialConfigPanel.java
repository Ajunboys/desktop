/*
 * Syncany, www.syncany.org
 * Copyright (C) 2011 Philipp C. Heckel <philipp.heckel@gmail.com> 
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package com.stacksync.desktop.connection.plugins.swift_comercial;

import com.stacksync.desktop.connection.plugins.swift.SwiftConnection;
import com.stacksync.desktop.connection.plugins.swift.SwiftConfigPanelFactory;
import com.stacksync.desktop.connection.plugins.ConfigPanel;
import com.stacksync.desktop.connection.plugins.TransferManager;
import com.stacksync.desktop.exceptions.StorageConnectException;
import com.stacksync.desktop.gui.error.ErrorMessage;

public class SwiftComercialConfigPanel extends ConfigPanel {
	
    public SwiftComercialConfigPanel(SwiftConnection connection) {
        super(connection);
        initComponents();	
        
        /// setting text ///                        
        lblUsername.setText(resourceBundle.getString("cp_simple_username"));
        lblPassword.setText(resourceBundle.getString("cp_simple_password"));  
        
        txtAuthUrl.setText(SwiftConfigPanelFactory.AUTH_URL);
        txtContainerName.setText(SwiftConfigPanelFactory.CONTAINER);
        txtAuthUrl.setVisible(false);
        lblAuthUrl.setVisible(false);
        txtContainerName.setVisible(false);
        lblContainerName.setVisible(false);
        
        txtUsername.requestFocus();
    }

    @Override
    public void load() {        
        String userName = getConnection().getUsername();
        
        if(userName.contains(":")){
            userName = userName.split(":")[0];
        }
        
        txtUsername.setText(userName);
        txtPassword.setText(getConnection().getApiKey());
        txtContainerName.setText(getConnection().getContainer());
        txtAuthUrl.setText(getConnection().getAuthUrl());        
    }

    @Override
    public void save() {
        String userName = getUserName();
        
        getConnection().setUsername(userName + ":" + userName);
        getConnection().setApiKey(getPassword());
        getConnection().setContainer(getContainerName());
        getConnection().setAuthUrl(getAuthUrl());
    }

    @Override
    public SwiftConnection getConnection() {
        return (SwiftConnection) super.getConnection();
    }       
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtUsername = new javax.swing.JTextField();
        txtPassword = new javax.swing.JPasswordField();
        txtContainerName = new javax.swing.JTextField();
        lblContainerName = new javax.swing.JLabel();
        lblUsername = new javax.swing.JLabel();
        lblPassword = new javax.swing.JLabel();
        lblAuthUrl = new javax.swing.JLabel();
        txtAuthUrl = new javax.swing.JTextField();

        txtUsername.setName("txtUsername"); // NOI18N
        txtUsername.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtUsernameActionPerformed(evt);
            }
        });

        txtPassword.setName("txtPassword"); // NOI18N

        txtContainerName.setText("stacksync");
        txtContainerName.setName("txtContainerName"); // NOI18N

        lblContainerName.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblContainerName.setText("__Container Name:");
        lblContainerName.setName("lblContainerName"); // NOI18N

        lblUsername.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblUsername.setText("__Username:");
        lblUsername.setName("lblUsername"); // NOI18N

        lblPassword.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblPassword.setText("__Password:");
        lblPassword.setName("lblPassword"); // NOI18N

        lblAuthUrl.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblAuthUrl.setText("__Auth URL:");
        lblAuthUrl.setName("lblAuthUrl"); // NOI18N

        txtAuthUrl.setText("https://10.30.239.228:8080/auth/v1.0");
        txtAuthUrl.setName("txtAuthUrl"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblUsername)
                    .addComponent(lblPassword)
                    .addComponent(lblContainerName)
                    .addComponent(lblAuthUrl))
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtAuthUrl)
                    .addComponent(txtContainerName, javax.swing.GroupLayout.DEFAULT_SIZE, 302, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtPassword, javax.swing.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE)
                            .addComponent(txtUsername))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblUsername))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPassword))
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtContainerName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblContainerName))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtAuthUrl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblAuthUrl))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void txtUsernameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtUsernameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtUsernameActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel lblAuthUrl;
    private javax.swing.JLabel lblContainerName;
    private javax.swing.JLabel lblPassword;
    private javax.swing.JLabel lblUsername;
    private javax.swing.JTextField txtAuthUrl;
    private javax.swing.JTextField txtContainerName;
    private javax.swing.JPasswordField txtPassword;
    private javax.swing.JTextField txtUsername;
    // End of variables declaration//GEN-END:variables

    @Override
    public void clean() {
        txtUsername.setText("");
        txtPassword.setText("");
        txtContainerName.setText(SwiftConfigPanelFactory.CONTAINER);
        txtAuthUrl.setText(SwiftConfigPanelFactory.AUTH_URL);
    }

    private String getUserName(){
        return txtUsername.getText().trim();
    }
    
    private String getPassword(){
        return new String(txtPassword.getPassword());
    }
    
    private String getContainerName(){
        return txtContainerName.getText().trim();
    }
    
    private String getAuthUrl(){
        return txtAuthUrl.getText().trim();
    }
        
    @Override
    public boolean check() {
        String userName = getUserName();
        String password = getPassword();
        String container = getContainerName();
        String authUrl = getAuthUrl();
        
        // check UserName
        if(userName.isEmpty()){
            ErrorMessage.showMessage(this, "Error", "The username is empty.");
            return false;
        } else{        
            if(userName.contains(":") || userName.contains("-") || userName.contains("_") || 
               userName.contains("/") || userName.contains("\\")){
               ErrorMessage.showMessage(this, "Error", "The username have invalid characters(:-_/\\)");
               return false;
            }
        }

        // check Password
        if(password.isEmpty()){            
            ErrorMessage.showMessage(this, "Error", "The password is empty.");
            return false;
        }
        
        //check Container
        if(container.isEmpty()){
            ErrorMessage.showMessage(this, "Error", "The password container is empty.");            
            return false;
        }
        
        // check AuthUrl
        if(authUrl.isEmpty()){
            ErrorMessage.showMessage(this, "Error", "The auth url is empty.");
            return false;
        } else {            
            //ping to host
            SwiftConnection connection = new SwiftConnection();
            connection.setApiKey(password);
            connection.setAuthUrl(authUrl);
            connection.setContainer("");
            connection.setUsername(userName + ":" + userName);
            
            TransferManager transfer = connection.createTransferManager();
            try {           
                transfer.connect();
            } catch (StorageConnectException ex) {
                Throwable exception = ex.getCause();
                ErrorMessage.showMessage(this, "Error", exception.getMessage());
                return false;
            }            
        }
                
        return true;
    }
}