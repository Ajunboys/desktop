/*
 * Syncany, www.syncany.org
 * Copyright (C) 2011 Philipp C. Heckel <philipp.heckel@gmail.com> 
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package com.stacksync.desktop.connection.plugins.sftp;

import java.io.File;
import com.stacksync.desktop.connection.plugins.ConfigPanel;
import com.stacksync.desktop.connection.plugins.TransferManager;
import com.stacksync.desktop.exceptions.StorageConnectException;
import com.stacksync.desktop.gui.error.ErrorMessage;
import com.stacksync.desktop.util.FileUtil;

/**
 *
 * @author Philipp C. Heckel <philipp.heckel@gmail.com>
 */
public class SftpConfigPanel extends ConfigPanel {
	
    /** Creates new form FtpConnectionPanel */
    public SftpConfigPanel(SftpConnection connection) {
        super(connection);
        initComponents();
        
        /// setting text ///
        jLabel1.setText(resourceBundle.getString("ftpc_server_name"));
        jLabel2.setText(resourceBundle.getString("ftpc_username"));
        jLabel3.setText(resourceBundle.getString("ftpc_password"));
        jLabel4.setText(resourceBundle.getString("ftpc_port"));
        jLabel7.setText(resourceBundle.getString("ftpc_path"));
        
    }

    @Override
    public void load() {
        txtHost.setText(getConnection().getHost());
        spnPort.setValue(new Integer( (getConnection().getPort() == 0) ? 22 : getConnection().getPort() ));
        txtUsername.setText(getConnection().getUsername());
        txtPassword.setText(getConnection().getPassword());
        txtFolder.setText(getConnection().getPath());
        chkKeyAuth.setEnabled(getConnection().isKeyAuth());
        txtPrivateKeyPath.setText(getConnection().getKeyPath());
        txtPassphrase.setText(getConnection().getPassphrase());
        txtPrivateKeyPath.setEnabled(false);
        txtPassphrase.setEnabled(false);
        btnBrowse.setEnabled(false);
    }

    @Override
    public void save() {
        getConnection().setHost(txtHost.getText());
        getConnection().setPort((Integer) spnPort.getValue());
        getConnection().setUsername(txtUsername.getText());
        getConnection().setPassword(new String(txtPassword.getPassword()));
        getConnection().setPath(txtFolder.getText());
        getConnection().setKeyAuth(chkKeyAuth.isSelected());
        getConnection().setKeyPath(txtPrivateKeyPath.getText());
        getConnection().setPassphrase(txtPassphrase.getText());
    }

    @Override
    public SftpConnection getConnection() {
        return (SftpConnection) super.getConnection();
    }


    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txtHost = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtUsername = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        spnPort = new javax.swing.JSpinner();
        txtPassword = new javax.swing.JPasswordField();
        jLabel7 = new javax.swing.JLabel();
        txtFolder = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtPassphrase = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtPrivateKeyPath = new javax.swing.JTextField();
        btnBrowse = new javax.swing.JButton();
        chkKeyAuth = new javax.swing.JCheckBox();

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel1.setText("Server Name:");
        jLabel1.setName("jLabel1"); // NOI18N

        txtHost.setText("10.30.239.228");
        txtHost.setName("txtHost"); // NOI18N

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel2.setText("User Name:");
        jLabel2.setName("jLabel2"); // NOI18N

        txtUsername.setText("testerftp");
        txtUsername.setName("txtUsername"); // NOI18N

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel3.setText("Password:");
        jLabel3.setName("jLabel3"); // NOI18N

        jLabel4.setText("Port:");
        jLabel4.setName("jLabel4"); // NOI18N

        spnPort.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(22), Integer.valueOf(1), null, Integer.valueOf(1)));
        spnPort.setName("spnPort"); // NOI18N
        spnPort.setValue(22);

        txtPassword.setText("testpass");
        txtPassword.setName("txtPassword"); // NOI18N

        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel7.setText("Path:");
        jLabel7.setName("jLabel7"); // NOI18N

        txtFolder.setText("/home/testerftp");
        txtFolder.setName("txtFolder"); // NOI18N

        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel6.setText("Passphrase:");
        jLabel6.setName("jLabel6"); // NOI18N

        txtPassphrase.setEnabled(false);
        txtPassphrase.setName("txtPassphrase"); // NOI18N

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel5.setText("Private Key Path:");
        jLabel5.setName("jLabel5"); // NOI18N

        txtPrivateKeyPath.setEnabled(false);
        txtPrivateKeyPath.setName("txtPrivateKeyPath"); // NOI18N

        btnBrowse.setText("Browse...");
        btnBrowse.setEnabled(false);
        btnBrowse.setName("btnBrowse"); // NOI18N
        btnBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBrowseActionPerformed(evt);
            }
        });

        chkKeyAuth.setText("Public Key Authentication");
        chkKeyAuth.setName("chkKeyAuth"); // NOI18N
        chkKeyAuth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkKeyAuthActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1)
                    .addComponent(jLabel3)
                    .addComponent(jLabel7)
                    .addComponent(jLabel6)
                    .addComponent(jLabel5))
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtPassphrase)
                    .addComponent(txtPassword)
                    .addComponent(txtUsername)
                    .addComponent(txtFolder)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtPrivateKeyPath)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnBrowse, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(chkKeyAuth)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtHost, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel4)
                                .addGap(18, 18, 18)
                                .addComponent(spnPort, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtHost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(spnPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                .addComponent(chkKeyAuth)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPrivateKeyPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(btnBrowse))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPassphrase, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtFolder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addGap(26, 26, 26))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void chkKeyAuthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkKeyAuthActionPerformed
        if (chkKeyAuth.isSelected()) {
            txtPassword.setEnabled(true);
            txtPrivateKeyPath.setEnabled(false);
            txtPassphrase.setEnabled(false);
            btnBrowse.setEnabled(false);
        } else {
            txtPassword.setEnabled(false);
            txtPrivateKeyPath.setEnabled(true);
            txtPassphrase.setEnabled(true);
            btnBrowse.setEnabled(true);
        }
    }//GEN-LAST:event_chkKeyAuthActionPerformed

    private void btnBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBrowseActionPerformed
        File selectedFolder = FileUtil.showBrowseFileDialog();

        if (selectedFolder != null) {
            txtPrivateKeyPath.setText(selectedFolder.getAbsolutePath());
        }
    }//GEN-LAST:event_btnBrowseActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBrowse;
    private javax.swing.JCheckBox chkKeyAuth;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JSpinner spnPort;
    private javax.swing.JTextField txtFolder;
    private javax.swing.JTextField txtHost;
    private javax.swing.JTextField txtPassphrase;
    private javax.swing.JPasswordField txtPassword;
    private javax.swing.JTextField txtPrivateKeyPath;
    private javax.swing.JTextField txtUsername;
    // End of variables declaration//GEN-END:variables

    @Override
    public void clean() {  
        txtFolder.setText("");
        txtHost.setText("");
        txtPassword.setText("");
        txtUsername.setText("");    
    }
    
    private String getUserName(){
        return txtUsername.getText().trim();
    }
    
    private String getPassword(){
        return new String(txtPassword.getPassword());
    }
    
    private String getFolder(){
        return txtFolder.getText().trim();
    }
    
    private String getHost(){
        return txtHost.getText().trim();
    }
    
    private Integer getPort(){
        return Integer.parseInt(spnPort.getValue().toString());
    }
    
    
    @Override
    public boolean check() {
        String host = getHost();
        String userName = getUserName();
        String password = getPassword();
        
        Integer port = getPort();
        String folder = getFolder();
        
        // check UserName
        if(userName.isEmpty()){
            ErrorMessage.showMessage(this, "Error", "The username is empty.");
            return false;
        } else{        
            if(userName.contains(":") || userName.contains("-") || userName.contains("_") || 
               userName.contains("/") || userName.contains("\\")){
               ErrorMessage.showMessage(this, "Error", "The username have invalid characters(:-_/\\)");
               return false;
            }
        }

        // check Password
        if(password.isEmpty()){
            ErrorMessage.showMessage(this, "Error", "The password is empty.");
            return false;
        }
        
        // check Server
        if(host.isEmpty()){
            ErrorMessage.showMessage(this, "Error", "The host is empty.");
            return false;
        }        
          
        //ping to host
        SftpConnection connection = new SftpConnection();
        connection.setHost(host);
        connection.setPort(port);
        
        connection.setUsername(userName);
        connection.setPassword(password);
        connection.setPath(folder);
        
        TransferManager transfer = connection.createTransferManager();
        try {           
            transfer.connect();
        } catch (StorageConnectException ex) {
            ErrorMessage.showMessage(this, "Error", "The host is incorrect. Host is not reachable.\n" + ex.getMessage());
            return false;
        }            

        return true;
    }

}